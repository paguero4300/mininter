# MININTER GPS Proxy - Product Requirements Document

## 1. Project Overview

**Project Name**: MININTER GPS Proxy System
**Version**: 1.0
**Platform**: Laravel 12, PHP 8.1+, Redis, Horizon, FilamentPHP 3
**Purpose**: Middleware system that consumes GPS data from GPServer and retransmits to MININTER government endpoints

## 2. System Architecture

### 2.1 Data Flow
- **Origin**: GPServer (GIPIES API) - https://www.gipies.pe/api/api.php
- **Middleware**: Laravel GPS Proxy System  
- **Destination**: MININTER Government Endpoints
  - SERENAZGO: https://transmision.mininter.gob.pe/retransmisionGPS/ubicacionGPS
  - POLICIAL: https://transmision.mininter.gob.pe/retransmisionpolicial/ubicacion/gps-policial

### 2.2 Technology Stack
- **Backend**: Laravel 12 with PHP 8.1+
- **Queue System**: Redis + Laravel Horizon
- **Admin Panel**: FilamentPHP 3
- **Database**: MySQL/PostgreSQL
- **Security**: TLS 1.2+ for MININTER endpoints
- **Caching**: Redis

## 3. Core Requirements

### 3.1 Municipality Management
- **Master Data**: 10 Peruvian municipalities (8 SERENAZGO + 2 POLICIAL)
- **Fields**: ID (UUID), Name, GPS Token, Ubigeo, Type, Comisaria Code, Active Status
- **Types**: SERENAZGO and POLICIAL with different data transformation rules

### 3.2 GPS Data Processing
- **Source Format**: GPServer API response with fields: imei, lat, lng, dt_server, speed, course, etc.
- **Target Format**: PT-GPS v1.2 specification with dd/MM/yyyy HH:mm:ss date format
- **Validation**: Coordinate bounds for Peru, IMEI format, timestamp validation
- **Transformation**: 1:1 field mapping with type-specific additions

### 3.3 Data Transformation Rules

#### SERENAZGO Type:
- Add field: `idMunicipalidad` (Municipality UUID)
- Endpoint: /retransmisionGPS/ubicacionGPS
- Standard GPS fields transformation

#### POLICIAL Type:
- Add fields: `idTransmision` (UUID), `codigoComisaria` (from municipality)
- Endpoint: /retransmisionpolicial/ubicacion/gps-policial  
- Standard GPS fields transformation

### 3.4 Synchronization Requirements
- **Frequency**: Every 1 minute automatic execution
- **Process**: For each active municipality:
  1. Fetch GPS data from GPServer using municipality token
  2. Validate and transform data according to type
  3. Send to appropriate MININTER endpoint
  4. Log results and handle retries
- **Retry Logic**: Exponential backoff (1s, 2s, 4s, 8s, 16s) with max 5 attempts

## 4. Technical Implementation

### 4.1 Core Services (COMPLETED)
- **GPServerClient**: Consume GPS data from GIPIES API
- **MininterClient**: Send data to MININTER endpoints with TLS 1.2+
- **PayloadTransformer**: Convert data formats per PT-GPS v1.2
- **ValidationService**: Validate GPS data and business rules
- **LoggingService**: Structured logging with multiple channels

### 4.2 Database Schema (COMPLETED)
- **municipalities** table: Master data with UUIDs, tokens, types
- **transmissions** table: Log all transmission attempts with status tracking
- **Failed jobs** table: Laravel queue failure handling

### 4.3 Queue Jobs (TO IMPLEMENT)
- **SyncMunicipalityJob**: Main job for processing municipality GPS data
- **RetryTransmissionJob**: Handle failed transmission retries
- **Queue Configuration**: Redis-based with Horizon monitoring
- **Worker Supervision**: Process monitoring and auto-restart

### 4.4 Scheduler Tasks (TO IMPLEMENT)
- **Sync Command**: Execute every minute via Laravel scheduler
- **Health Check Command**: Monitor system health every 5 minutes
- **Log Cleanup Command**: Clean old logs daily
- **Metrics Collection**: Gather system metrics hourly

### 4.5 Admin Panel (TO IMPLEMENT)
- **FilamentPHP 3** based administration interface
- **Municipality Management**: CRUD operations for municipality data
- **Transmission Monitoring**: View transmission logs and status
- **Dashboard**: Real-time metrics and system health
- **Log Viewer**: Integrated log viewing and filtering

## 5. Performance Requirements

### 5.1 Processing Capacity
- **Throughput**: Handle GPS data for 10 municipalities per minute
- **Concurrency**: Process multiple municipalities in parallel
- **Timeout Handling**: 30-second timeouts for external API calls
- **Resource Usage**: Optimize memory usage for large GPS datasets

### 5.2 Reliability Requirements
- **Uptime**: 99.5% availability target
- **Error Handling**: Graceful degradation with comprehensive logging
- **Retry Strategy**: Intelligent retry with exponential backoff
- **Data Integrity**: Ensure no GPS data loss during processing

## 6. Security Requirements

### 6.1 API Security
- **TLS 1.2+**: Mandatory for MININTER endpoint communication
- **Token Management**: Secure storage of GPS tokens per municipality
- **Input Validation**: Comprehensive validation of all GPS data
- **Rate Limiting**: Prevent API abuse and overload

### 6.2 System Security
- **Environment Variables**: Secure configuration management
- **Database Security**: Encrypted sensitive data storage
- **Access Control**: Role-based access for admin panel
- **Audit Logging**: Track all system operations and changes

## 7. Monitoring and Logging

### 7.1 Logging Channels
- **GPS Channel**: GPS data fetching and processing
- **Transmissions Channel**: MININTER endpoint communications
- **System Channel**: Health checks and system operations
- **Errors Channel**: Error tracking and debugging

### 7.2 Metrics and Monitoring
- **Success Rates**: Track transmission success percentages
- **Response Times**: Monitor API response latencies  
- **Error Tracking**: Categorize and count error types
- **Health Checks**: Regular connectivity verification

## 8. Testing Requirements

### 8.1 Unit Testing
- **Service Testing**: Test all core services individually
- **Transformation Testing**: Verify data format conversions
- **Validation Testing**: Test all validation rules
- **Mock External APIs**: Use HTTP fakes for testing

### 8.2 Integration Testing
- **End-to-End Flow**: Test complete GPS data pipeline
- **Queue Testing**: Verify job processing and retries
- **Database Testing**: Test data persistence and retrieval
- **API Integration**: Test actual endpoint communications

## 9. Deployment Requirements

### 9.1 Environment Setup
- **Production Environment**: Linux server with PHP 8.1+
- **Redis Configuration**: Queue and cache setup
- **Database Setup**: MySQL/PostgreSQL with proper indexes
- **Process Supervision**: Horizon worker management

### 9.2 Configuration Management
- **Environment Variables**: All configurable via .env
- **Deployment Scripts**: Automated deployment procedures
- **Database Migrations**: Version-controlled schema changes
- **Monitoring Setup**: Log aggregation and alerting

## 10. Maintenance and Operations

### 10.1 Operational Procedures
- **Log Rotation**: Automatic cleanup of old log files
- **Database Maintenance**: Regular optimization and cleanup
- **Health Monitoring**: Automated health checks and alerts
- **Backup Procedures**: Regular data backup and recovery

### 10.2 Support and Documentation
- **System Documentation**: Complete technical documentation
- **Operational Runbooks**: Step-by-step operational procedures
- **Troubleshooting Guide**: Common issues and solutions
- **API Documentation**: Complete endpoint documentation

## 11. Success Criteria

### 11.1 Functional Success
- ‚úÖ Successfully processes GPS data for all 10 municipalities
- ‚úÖ Maintains data format compliance with PT-GPS v1.2
- ‚úÖ Achieves reliable communication with MININTER endpoints
- ‚úÖ Provides comprehensive monitoring and alerting

### 11.2 Performance Success  
- ‚úÖ Processes GPS data within 60-second intervals
- ‚úÖ Maintains 99%+ transmission success rate
- ‚úÖ Responds to admin panel requests within 2 seconds
- ‚úÖ Handles system failures gracefully with automatic recovery

## 12. Current Project Status

### COMPLETED PHASES:
- ‚úÖ **FASE 1**: Base Configuration - Redis, Horizon, FilamentPHP 3
- ‚úÖ **FASE 2**: Data Structure - Migrations, Models, Seeders  
- ‚úÖ **FASE 3**: Core Services - All 5 core services implemented

### CURRENT PHASE:
- üîÑ **FASE 4**: Async Jobs - Queue jobs and scheduler (IN PROGRESS)

### REMAINING PHASES:
- ‚è≥ **FASE 5**: Admin Panel - FilamentPHP resources and dashboard
- ‚è≥ **FASE 6**: Testing & Deployment - Tests and documentation 